.ll 74
.he 'msg_receive(2)'VSTa Manual'msg_receive(2)'
.fo ''%''
.sp 2
.bd 1
NAME
.br
.ti +6
msg_receive - receive messages on a server port
.sp
.bd 1
SYNOPSIS
.br
.in +6
.li 3
#include <sys/msg.h>

int msg_receive(port_t port, struct msg *msg);
.sp 1
.in -6
.bd 1
DESCRIPTION
.br
.in +6
.ul 1
msg_receive()
is used by a server to receive messages on a server's
port.  The received message may be either a regular
data message from one of the server's current clients,
or a system-generated notification of certain
exceptional events.  Messages with an
.ul 1
m_type
field below
.bd 1
M_RESVD
are guaranteed to be kernel-generated; they can not be spoofed.
.sp
Each message may contain one or more segments of data in a
scatter/gather format.  The field
.ul 1
m_nseg
indicates how many such segments were received; the actual
segments are described by the
.ul 1
m_seg[]
array of pointer/length structures.
.sp
The field
.ul 1
m_sender
indicates which client sent this message; in the case of an
.bd 1
M_CONNECT
message, it indicates the handle of the would-be connecter.  This
handle will be valid if the server
.ul 1
msg_accept()
's
the connection.
.sp
The fields
.ul 1
m_arg
and
.ul 1
m_arg1
are specified by the sender.  By convention,
.ul 1
m_arg
holds the number of bytes requested or sent in normal data
messages.
.sp
In the case of normal data messages, the request is completed
and a reply sent back by using
.ul 1
msg_reply().
.sp
Special messages (
.ul 1
m_op
less than
.bd 1
M_RESVD)
are:
.sp
.bd 1
M_CONNECT
.br
.in +4
A client has attempted connection with
.ul 1
msg_connect().  m_arg
holds the requested mode(s),
.ul 1
m_nseg
is always set to 1, and the segment holds an array
of
.ul 1
struct perm
elements, describing the abilities of the client.  Because
this is a kernel-generated message, the client may not spoof
it, and the permissions so described may be trusted by the
server.  This message must be completed by either a
.ul 1
msg_accept()
call (to accept the client) or a
.ul 1
msg_err()
call to reject the connection.
.sp
.in -4
.bd 1
M_DISCONNECT
.br
.in +4
This message indicates that a client has terminated, either
explicitly or due to an unhandled event.  The
.ul 1
m_sender
field identifies the client, who is no longer connected to
the server.
.sp
.in -4
.bd 1
M_DUP
.br
.in +4
This message is something of a misnomer.  A POSIX
.ul 1
dup()
causes two file descriptors to refer to the same connection; in contrast,
the
.bd 1
M_DUP
message causes the server to allocate a new distinct session, whose
state (i.e., file position, etc.) starts as a copy of the original
connection's, but is distinct.  It is caused by the
.ul 1
clone()
system call, as well as a part of the
.ul 1
fork()
operation.
.sp
.in -4
.bd 1
M_ABORT
.br
.in +4
When a pending operation is interrupted (i.e., a message
has been sent via
.ul 1
msg_send()
but a response has not yet been received, and the requesting
process receives an event), the kernel causes this message to
appear at the server.  It is expected that the server will
clear any state, and use a
.ul 1
msg_reply()
to indicate that it has reset the per-client state to a point
where the client may send a new request.
.sp
.in -4
.bd 1
M_ISR
.sp
.in +4
This message is generated by the kernel for servers which have
registered for hardware interrupts.  The kernel clears the hardware
interrupt, and then queues this message for the server.  No
reply is needed for this message, which will never contain any
segments of data.  The
.ul 1
m_arg
field holds a count of the number of interrupts which have been
received since the message was queued, but before it was received.
.sp
.in -4
.bd 1
M_TIME
.br
.in +4
It was originally thought that timing messages would be generated
by the kernel.  In fact, no such service exists (or appears to be
needed).  This value is reserved.
.sp
.in -4
